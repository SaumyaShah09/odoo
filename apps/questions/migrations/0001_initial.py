# Generated by Django 5.2.4 on 2025-07-12 04:32

import ckeditor_uploader.fields
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('is_closed', models.BooleanField(default=False)),
                ('close_reason', models.TextField(blank=True)),
                ('answer_count', models.PositiveIntegerField(default=0)),
                ('vote_score', models.IntegerField(default=0)),
                ('has_accepted_answer', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_views', to='questions.question')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['-created_at'], name='questions_q_created_7d8295_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['-vote_score'], name='questions_q_vote_sc_12a631_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['created_by'], name='questions_q_created_078554_idx'),
        ),
        migrations.AddIndex(
            model_name='questionview',
            index=models.Index(fields=['question', 'user'], name='questions_q_questio_c79e6b_idx'),
        ),
        migrations.AddIndex(
            model_name='questionview',
            index=models.Index(fields=['question', 'ip_address'], name='questions_q_questio_df92bb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='questionview',
            unique_together={('question', 'user', 'ip_address')},
        ),
    ]
